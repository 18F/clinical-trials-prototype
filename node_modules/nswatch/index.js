'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var chokidar = _interopDefault(require('chokidar'));
var chalk = _interopDefault(require('chalk'));
var crossSpawn = _interopDefault(require('cross-spawn'));

var log = {}

log.info = function (tag, msg) {
  console.log(((chalk.yellow(("> [" + tag + "]"))) + " " + msg))
}

log.error = function (tag, msg) {
  console.log(((chalk.red(("> [" + tag + "]"))) + " " + msg))
}

var defaultCb = function (err) {
  if (err) {
    console.error(err)
  }
}

function spawn(command, args, cb) {
  if ( args === void 0 ) args = [];
  if ( cb === void 0 ) cb = defaultCb;

  var script = args[1]
  var child = crossSpawn(command, args, {stdio: 'inherit'})
  log.info(script, ("started " + script))
  child.on('close', function (code) {
    var err = null
    if (code !== 0) {
      err = "script " + script + " exited with wrong status code " + code
    }
    cb(err)
  })
}

function runParallel(scripts) {
  return scripts.map(function (script) {
    return spawn('npm', ['run', script], function (err) {
      if (err) {
        log.error(script, err)
      }
    })
  })
}

function runSequence(scripts) {
  var exec = function () {
    if (scripts.length > 0) {
      var script = scripts.shift()
      spawn('npm', ['run', script], function (err) {
        if (err) {
          log.error(script, err)
        }
        exec()
      })
    }
  }

  exec()
}

function run (scripts) {
  if (typeof scripts === 'string') {
    runSequence(scripts.split('!'))
  } else if (Array.isArray(scripts)) {
    runParallel(scripts)
  }
}

function watch(files, scripts, ref) {
  if ( ref === void 0 ) ref = {};
  var verbose = ref.verbose; if ( verbose === void 0 ) verbose = true;

  var init = false
  var watcher = chokidar.watch(files)

  // run for first time
  run(scripts)

  // watch changes
  watcher
    .on('ready', function () {
      if (verbose) {
        log.info('nswatch', ("watcher for `" + (chalk.bold(scripts)) + "` is ready"))
      }
      init = true
    })
    .on('all', function (e, p) {
      // unwatch files if they are removed
      if (e === 'unlink') {
        watcher.unwatch(p)
      }
      if (init && verbose) {
        log.info('nswatch', ("rerun `" + (chalk.bold(scripts)) + "` due to changes"))
      }
      if (init) {
        run(scripts)
      }
    })
}

module.exports = watch;